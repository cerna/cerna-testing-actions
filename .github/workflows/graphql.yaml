name: Testing GraphQL

on:
  push:
    branches:
    - '*'

env:
  BuildDockerImage: 'false'
  PrivateSigningKey: $ {{ secrets.PRIVATE_SIGNING_KEY }}
  ImageSuffixArray: 'amd64_8 amd64_9 amd64_10 arm64_9 arm64_10 i386_8 i386_9 i386_10 armhf_8 armhf_9 armhf_10'
  ImageNameRoot: 'machinekit-hal-debian-builder-v'
  DockerRegex: '^scripts/(((containers/){0,1}buildsystem/debian/.{1,})|build_debian_docker_image)$'


jobs:
  graphql:
    runs-on: ubuntu-latest

    steps:
      - name: Query GitHub Packages registry for Docker images
        if: env.BuildDockerImage != 'true'
        id: get_debian_builders_data2
        uses: octokit/graphql-action@v2.x
        with:
          query: |
            query($owner: String!, $repository: String!, $querystring: String!) {
                  repository(owner: $owner, name: $repository) {
                    registryPackagesForQuery(packageType: DOCKER, first: 100, query: $querystring) {
                      nodes {
                        name
                        version(version: "latest") {
                          platform
                          sha256
                        }
                      }
                    }
                  }
                }
          owner: ${{ github.event.repository.owner.name }}
          repository: ${{ github.event.repository.name }}
          querystring: 'is:public machinekit-hal-debian-builder-v'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - run: |
          echo "${{ steps.get_debian_builders_data2.outputs.data }}"
          echo "${{ toJson(steps.get_debian_builders_data2.outputs.data) }}"

      - name: Create query
        run: |
          echo "
            query: 
              'query(\$owner: String!, \$repository: String!, \$querystr: String!) {
                repository(owner: \$owner, name: \$repository) {
                  registryPackagesForQuery(packageType: DOCKER, first: 100, query: \$querystr) {
                    nodes {
                      name
                      version(version: \"latest\") {
                        platform
                        sha256
                      }
                    }
                  }
                }
              }'
            variables:
              owner:
                type: arg
                name: owner
              repository:
                type: arg
                name: repository
              querystr:
                type: arg
                name: querystr
          " > dockerimagesingithubpackages.yaml

      - name: Query GitHub Packages registry for Docker images
        if: ${{ env.builddockerimage }} != 'true'
        uses: helaili/github-graphql-action@2.0.1
        id: get_debian_builders_data
        with:
          query: dockerimagesingithubpackages.yaml
          outputFile: q2.json
          logLevel: debug
          owner: ${{ github.event.repository.owner.name }}
          repository: ${{ github.event.repository.name }}
          querystr: is:public machinekit-hal-debian-builder-v
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - run: jq '.' q2.json 

      - name: Test JSON
        shell: bash  
        run: |
          test_array=(amd64_8 amd64_9 amd64_10 arm64_9 arm64_10 i386_8 i386_9 i386_10 armhf_8 armhf_9 armhf_10)
          MISSING=0
          for i in ${test_array[@]}
          do
            IMAGENAME="machinekit-hal-debian-builder-v$i"
            IMAGESHA=$(jq -r --arg IMAGENAME "$IMAGENAME" '.data.repository.registryPackagesForQuery.nodes[] | select(.name == $IMAGENAME).version.sha256' ${FILE})
            if [ -z "$IMAGESHA" ]; then
              printf "Docker image $IMAGENAME:latest does not exist in registry docker.pkg.github.com/${{ github.repository }}\n"
              ((MISSING=MISSING+1))
            fi
          done
          if [ $MISSING -gt 0 ]; then
            printf "Rebuilding\n"
          fi
        env:
          FILE: q2.json

      - name: Check if all Debian builder Docker images are present
        if: env.BuildDockerImage != 'true'
        run: |
          test_array=(${IMAGE_SUFFIX_ARRAY})
          MISSING=0
          for i in ${test_array[@]}
          do
            IMAGENAME="${IMAGE_NAME_ROOT}$i"
            IMAGESHA=$(echo "$INPUT_JSON" | jq -r --arg IMAGENAME "$IMAGENAME" '.repository.registryPackagesForQuery.nodes[] | select(.name == $IMAGENAME).version.sha256')
            if [ -z "$IMAGESHA" ]; then
              printf "Docker image $IMAGENAME:latest does not exist in registry docker.pkg.github.com/${{ github.repository }}\n"
              ((MISSING=MISSING+1))
            fi
          done
          if [ $MISSING -gt 0 ]; then
            printf "There is $MISSING Docker images\n"
            echo ::set-env name=BuildDockerImage::true
          fi
        env:
          IMAGE_SUFFIX_ARRAY: ${{ env.ImageSuffixArray }}
          IMAGE_NAME_ROOT: ${{ env.ImageNameRoot }} 
          INPUT_JSON: ${{ steps.get_debian_builders_data2.outputs.data }}    