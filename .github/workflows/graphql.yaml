name: Testing GraphQL

on:
  push:
    branches:
    - '*'

env:
  BuildDockerImage: 'false'

jobs:
  graphql:
    runs-on: ubuntu-latest

    steps:
      - name: Query GitHub Packages registry for Docker images
        if: env.BuildDockerImage != 'true'
        id: get_debian_builders_data
        uses: octokit/graphql-action@v2.x
        with:
          query: |
            query($owner: String!, $repository: String!, $querystring: String!) {
                  repository(owner: $owner, name: $repository) {
                    registryPackagesForQuery(packageType: DOCKER, first: 100, query: $querystring) {
                      nodes {
                        name
                        version(version: "latest") {
                          platform
                          sha256
                        }
                      }
                    }
                  }
                }
          owner: ${{ github.event.repository.owner.name }}
          repository: ${{ github.event.repository.name }}
          querystring: 'is:public machinekit-hal-debian-builder-v'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if all Debian builder Docker images are present
        if: env.BuildDockerImage != 'true'
        run: |
          test_array=(${IMAGE_SUFFIX_ARRAY})
          MISSING=0
          for i in ${test_array[@]}
          do
            IMAGENAME="${IMAGE_NAME_ROOT}$i"
            IMAGESHA=$(printl "${INPUT_JSON}" | jq -r --arg IMAGENAME "$IMAGENAME" '.data.repository.registryPackagesForQuery.nodes[] | select(.name == $IMAGENAME).version.sha256')
            if [ -z "$IMAGESHA" ]; then
              printf "Docker image $IMAGENAME:latest does not exist in registry docker.pkg.github.com/${{ github.repository }}\n"
              ((MISSING=MISSING+1))
            fi
          done
          if [ $MISSING -gt 0 ]; then
            printf "There is $MISSING Docker images\n"
            echo ::set-env name=BuildDockerImage::true
          fi
        env:
          IMAGE_SUFFIX_ARRAY: ${{ env.ImageSuffixArray }}
          IMAGE_NAME_ROOT: ${{ env.ImageNameRoot }}
          INPUT_JSON: ${{ steps.get_debian_builders_data.outputs.data }}
        working-directory: ./github-packages