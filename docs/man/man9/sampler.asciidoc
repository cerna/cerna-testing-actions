---
---
:skip-front-matter:

= SAMPLER
:manmanual: HAL Components
:mansource: ../man/man9/sampler.asciidoc
:man version : 


== NAME
**sampler** -- sample data from HAL in real time


== SYNOPSIS
**loadrt sampler** __depth=**depth1**[,**depth2**...] cfg=**string1**[,**string2**...]__



== DESCRIPTION
**sampler** and **halsampler** are used together to sample HAL data in real time and store it in a file.

**sampler** is a realtime HAL component that exports HAL pins and creates a FIFO in shared memory. +
It then begins sampling data from the HAL and storing it to the FIFO.

**halsampler** is a user space program that copies data from the FIFO to stdout, where it can
be redirected to a file or piped to some other program.

== OPTIONS

depth=__**depth1**[,**depth2**...]__ +
Sets the depth of the realtime->user FIFO that **sampler** creates to buffer the realtime data.  +
Multiple values of **depth** (separated by commas) can be specified if you need more than one FIFO
(for example if you want to sample data from two different realtime threads).

cfg=__**string1**[,**string2**...]__ +
Defines the set of HAL pins that **sampler** exports and later samples data from.  +
One **string** must be supplied for each FIFO, separated by commas.

**sampler** exports one pin for each character in **string**. +
Legal characters are: +
__F, f__ (float pin) +
__B, b__ (bit pin) +
__S, s__ (s32 pin) +
__U, u__ (u32 pin)

== FUNCTIONS

**sampler**.__N__ +
One function is created per FIFO, numbered from zero.

== PINS

**sampler.**__N__.**pin**.__M__ input +
Pin for the data that will wind up in +
column __M__ of FIFO __N__ (and in column __M__ of the output file).  +
The pin type depends on the config string.

**sampler.**__N__**.curr-depth** s32 output +
Current number of samples in the FIFO.  +
When this reaches __depth__ new data will begin overwriting old data, and some samples
will be lost.

**sampler.**__N__**.full** bit output +
TRUE when the FIFO __N__ is full, FALSE when there is room for another sample.

**sampler.**__N__**.enable** bit input +
When TRUE, samples are captured and placed in FIFO __N__, +
when FALSE, no samples are acquired.  Defaults to TRUE.



== PARAMETERS

**sampler.**__N__**.overruns** s32 read/write +
The number of times that **sampler** has tried to write data to the HAL pins but found no room in the FIFO.  +
It increments whenever __full__ is true, and can be reset by the **setp** command.

**sampler.**__N__**.sample-num** s32 read/write +
A number that identifies the sample.  +
It is automatically incremented for each sample, and can be reset using the setp command.  +
The sample number can optionally be printed in the first column of the output from  **halsampler** , +
using the **-t** option. +
(see **halsampler** )



== SEE ALSO
**halsampler** +
**streamer** +
**halstreamer**



== HISTORY



== BUGS



== AUTHOR
Original version by John Kasunich, as part of the LinuxCNC
project.  Improvements by several other members of
the LinuxCNC development team. +
Now part of the Machinekit project


== COPYRIGHT
Copyright (c) 2006 John Kasunich. +
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
